from raptor_encoder import *
from raptor_decoder import *
import random
import raptor_encoder
import raptor_decoder

#def encoder_test(k, dataLen, lossNum, lossDataIndex):

		
#def decoder_test:

def main():
    k = 80
    dataLen = 20
    lossNum = 4

    encoder = raptor_encoder.RaptorEncoder(k, lossNum)
    
    print "Source symbols generated by random:\n"
    
    index = 0;
    i = 0
    while i < k:
        j = 0
        src_symbols = raptor_encoder.vectoruc()
        while j < dataLen:
            rndValue = random.randint(0, 255)
            #print rndValue
            src_symbols.append(rndValue)
            j += 1
        print list(src_symbols)
        encoder.set_data(src_symbols)
        i += 1
        
    encoder.get_data_access()
    
    N = encoder.count_encodedSym()
    print "encoded symbols number = %4d" % N
    
    decoder = raptor_decoder.RaptorDecoder()
    decoder.set_parameters(k, N, lossNum)
    print "Step 1"
    
	#Produce the index of the lost packet
    lossDataIndex = []
    #lossDataIndex.append(random.randint(0, N))
    lossIndex = 0
    while lossIndex < lossNum:
        rndValue = random.randint(0, N)
        if rndValue not in lossDataIndex:
            lossDataIndex.append(rndValue)
            lossIndex += 1

    lossDataIndex.sort()
    print lossDataIndex

    i = 0
    while i < N:
        isFound = False
        j = 0
        while j < lossNum:
            if i == lossDataIndex[j]:
                isFound = True
                break
            else:
                isFound = False
            
            j += 1
                
        if isFound is False:
    		    decoder.set_ESI(i)
    		
        i += 1

    print "Step 2"
    
    while encoder.is_empty() is False:
        encoded_symbols = raptor_decoder.vectoruc()
        encoded_symbols = encoder.get_encodedSym()
        #x = list(encoded_symbols)
        #print x
        decoder.set_data(encoded_symbols)     
        
    print "Step 3"
    #decoder.produce_data(N, dataLen)
    print "Step 4"
    decoder.decode()

    print "Step 5"    
    
    while decoder.is_empty() is False:
        recover_symbols = raptor_decoder.vectoruc()
        recover_symbols = decoder.get_decodedSym()
        y = list(recover_symbols)
        print y
        
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass